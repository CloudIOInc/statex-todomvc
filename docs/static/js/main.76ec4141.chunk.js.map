{"version":3,"sources":["state.ts","ClearCompleted.tsx","TodoFooter.tsx","TodoItem.tsx","TodoList.tsx","TodoHeader.tsx","ToggleAll.tsx","App.tsx","index.tsx"],"names":["id","todoList","atom","path","defaultValue","text","isComplete","todoFilterAtom","todoFilteredIdAndIndex","selector","get","filter","all","list","item","map","todo","index","indexOf","todoListStatsState","totalNum","totalCompletedNum","totalUncompletedNum","percentCompleted","length","shouldComponentUpdate","value","oldValue","memo","useStateXValue","setFilter","useStateXValueSetter","clearCompleted","useStateXCallback","set","activeTodos","className","onClick","useStateX","Math","round","href","cx","selected","useState","editing","setEditing","useStateXForTextInput","params","useStateXForCheckbox","deleteItem","useStateXValueRemover","completed","checked","autoFocus","onBlur","e","onDoubleClick","filteredIdAndIndex","ids","oldIds","JSON","stringify","entry","key","inputValue","setInputValue","setTodoList","style","userSelect","placeholder","onKeyDown","event","keyCode","preventDefault","oldTodoList","onChange","target","toggleAll","updatedTodos","todos","find","type","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76ec4141.chunk.js","sourcesContent":["/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport { atom, selector } from '@cloudio/statex';\nimport { Todo, Filter, Stats } from './types';\n\nconst initialTodos: Todo[] = [\n  { id: 100, text: 'Learn Javascript', isComplete: true },\n  { id: 101, text: 'Learn React', isComplete: true },\n  { id: 102, text: \"Use CloudIO's StateX\" },\n  { id: 103, text: 'Launch Product' },\n];\n\nlet id = 103;\nfunction getId() {\n  return ++id;\n}\n\nconst todoList = atom({\n  path: ['todo', 'list'],\n  defaultValue: initialTodos,\n});\n\nconst todoFilterAtom = atom<Filter>({\n  path: ['todo', 'filter'],\n  defaultValue: 'Show All',\n});\n\nconst todoFilteredIdAndIndex = selector({\n  path: ['todo', 'filteredIdAndIndex'],\n  defaultValue: [],\n  get: ({ get }) => {\n    const filter = get(todoFilterAtom);\n    const all = get(todoList);\n    let list = all;\n    switch (filter) {\n      case 'Show Completed':\n        list = list.filter((item) => item.isComplete);\n        break;\n      case 'Show Uncompleted':\n        list = list.filter((item) => !item.isComplete);\n        break;\n    }\n    return list.map((todo) => ({ id: todo.id, index: all.indexOf(todo) }));\n  },\n});\n\nconst todoListStatsState = selector<Stats>({\n  path: ['todo', 'stats'],\n  defaultValue: {\n    totalNum: 0,\n    totalCompletedNum: 0,\n    totalUncompletedNum: 0,\n    percentCompleted: 0,\n  },\n  get: ({ get }) => {\n    const list = get(todoList);\n    const totalNum = list.length;\n    const totalCompletedNum = list.filter((item) => item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n  shouldComponentUpdate: (value, oldValue) => {\n    return (\n      !oldValue ||\n      value.totalNum !== oldValue.totalNum ||\n      value.totalCompletedNum !== oldValue.totalCompletedNum ||\n      value.totalUncompletedNum !== oldValue.totalUncompletedNum ||\n      value.percentCompleted !== oldValue.percentCompleted\n    );\n  },\n});\n\nexport {\n  getId,\n  todoList,\n  todoListStatsState,\n  todoFilteredIdAndIndex,\n  todoFilterAtom,\n};\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { memo } from 'react';\nimport {\n  useStateXValue,\n  useStateXCallback,\n  useStateXValueSetter,\n} from '@cloudio/statex';\nimport { todoListStatsState, todoList, todoFilterAtom } from './state';\n\nfunction ClearCompleted() {\n  const { totalCompletedNum } = useStateXValue(todoListStatsState);\n  const setFilter = useStateXValueSetter(todoFilterAtom);\n\n  const clearCompleted = useStateXCallback(({ get, set }) => {\n    let todos = get(todoList);\n    const activeTodos = todos.filter((todo) => !todo.isComplete);\n    set(todoList, activeTodos);\n    setFilter('Show All');\n  }, []);\n\n  if (!totalCompletedNum) {\n    return null;\n  }\n\n  return (\n    <button className=\"clear-completed\" onClick={clearCompleted}>\n      Clear completed\n    </button>\n  );\n}\n\nexport default memo(ClearCompleted);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { memo } from 'react';\nimport cx from 'classnames';\nimport { useStateXValue, useStateX } from '@cloudio/statex';\nimport { todoListStatsState, todoFilterAtom } from './state';\nimport ClearCompleted from './ClearCompleted';\n\nfunction TodoFooter() {\n  const { percentCompleted, totalUncompletedNum } = useStateXValue(\n    todoListStatsState,\n  );\n  const [filter, setFilter] = useStateX(todoFilterAtom);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{totalUncompletedNum}</strong>\n        {` item left - ${Math.round(percentCompleted * 100)}% complete`}\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => setFilter('Show All')}\n            className={cx({ selected: filter === 'Show All' })}>\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => setFilter('Show Uncompleted')}\n            className={cx({ selected: filter === 'Show Uncompleted' })}>\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => setFilter('Show Completed')}\n            className={cx({ selected: filter === 'Show Completed' })}>\n            Completed\n          </a>\n        </li>\n      </ul>\n      <ClearCompleted />\n    </footer>\n  );\n}\n\nexport default memo(TodoFooter);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { useState, memo } from 'react';\nimport cx from 'classnames';\nimport {\n  useStateXForTextInput,\n  useStateXForCheckbox,\n  useStateXValueRemover,\n} from '@cloudio/statex';\n\nfunction TodoItem({ index }: { index: number }) {\n  const [editing, setEditing] = useState(false);\n  const text = useStateXForTextInput(['todo', 'list', ':index', 'text'], '', {\n    params: { index },\n  });\n  const isComplete = useStateXForCheckbox(\n    ['todo', 'list', ':index', 'isComplete'],\n    false,\n    { params: { index } },\n  );\n  const deleteItem = useStateXValueRemover(['todo', 'list', ':index'], {\n    params: { index },\n  });\n\n  return (\n    <li\n      className={cx({\n        completed: isComplete.checked,\n        editing: editing,\n      })}>\n      {!editing ? (\n        <div className=\"view\">\n          <input className=\"toggle\" {...isComplete} />\n          <label onDoubleClick={(e) => setEditing(true)}>{text.value}</label>\n          <button className=\"destroy\" onClick={deleteItem} />\n        </div>\n      ) : (\n        <input\n          autoFocus\n          className=\"edit\"\n          onBlur={(e) => setEditing(false)}\n          {...text}\n        />\n      )}\n    </li>\n  );\n}\n\nexport default memo(TodoItem);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { memo } from 'react';\nimport { useStateXValue } from '@cloudio/statex';\nimport { todoFilteredIdAndIndex } from './state';\nimport TodoItem from './TodoItem';\n\nfunction TodoList() {\n  const filteredIdAndIndex = useStateXValue(todoFilteredIdAndIndex, {\n    shouldComponentUpdate: (ids, oldIds) => {\n      return JSON.stringify(ids) !== JSON.stringify(oldIds);\n    },\n  });\n\n  return (\n    <>\n      {filteredIdAndIndex.map((entry) => (\n        <TodoItem index={entry.index} key={entry.id} />\n      ))}\n    </>\n  );\n}\n\nexport default memo(TodoList);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { memo, useState } from 'react';\nimport { useStateXValueSetter } from '@cloudio/statex';\nimport { getId, todoList } from './state';\n\nfunction TodoHeader() {\n  const [inputValue, setInputValue] = useState('');\n  const setTodoList = useStateXValueSetter(todoList);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  function handleNewTodoKeyDown(event: React.KeyboardEvent) {\n    if (event.keyCode !== 13) {\n      return;\n    }\n\n    event.preventDefault();\n    addItem();\n  }\n\n  return (\n    <header className=\"header\">\n      <h1 style={{ userSelect: 'none' }}>todos</h1>\n      <input\n        value={inputValue}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onKeyDown={handleNewTodoKeyDown}\n        autoFocus={true}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n    </header>\n  );\n}\n\nexport default memo(TodoHeader);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { memo } from 'react';\nimport { todoList, todoListStatsState } from './state';\nimport { useStateXCallback, useStateXValue } from '@cloudio/statex';\nimport { Todo } from './types';\n\nfunction ToggleAll() {\n  const { percentCompleted } = useStateXValue(todoListStatsState);\n\n  const toggleAll = useStateXCallback(({ get, set }) => {\n    let todos = get(todoList);\n    const hasActive = todos.find((todo) => !todo.isComplete);\n    let updatedTodos: Todo[];\n    if (hasActive) {\n      updatedTodos = todos.map((todo) => {\n        return todo.isComplete ? todo : { ...todo, isComplete: true };\n      });\n    } else {\n      updatedTodos = todos.map((todo) => {\n        return !todo.isComplete ? todo : { ...todo, isComplete: false };\n      });\n    }\n    set(todoList, updatedTodos);\n  }, []);\n\n  return (\n    <>\n      <input\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n        onChange={toggleAll}\n        checked={percentCompleted !== 1}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </>\n  );\n}\n\nexport default memo(ToggleAll);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React, { memo } from 'react';\nimport TodoFooter from './TodoFooter';\nimport TodoList from './TodoList';\nimport TodoHeader from './TodoHeader';\nimport ToggleAll from './ToggleAll';\n\nimport 'todomvc-common/base.css';\nimport 'todomvc-app-css/index.css';\n\nfunction App() {\n  return (\n    <div className=\"todoapp\">\n      <TodoHeader />\n      <section className=\"main\">\n        <ToggleAll />\n        <ul className=\"todo-list\">\n          <TodoList />\n        </ul>\n      </section>\n      <TodoFooter />\n    </div>\n  );\n}\n\nexport default memo(App);\n","/**\n * Copyright (c) CloudIO, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  https://cloudioinc.github.io/statex/\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { StateXProvider } from '@cloudio/statex';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateXProvider>\n      <App />\n    </StateXProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}